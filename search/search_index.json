{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"pandastools: Helper functions for Pandas DataFrames / Series What is it? PandasTools is a Python package that provides additional functions for Pandas DataFrames, Series and Indexes via accessors Main Features TODO Where to get it The source code is currently hosted on GitHub at: https://github.com/phil65/PandasTools The latest released version are available at the Python package index . # or PyPI pip install pandastools Dependencies pandas numba Installation from sources This project uses poetry for dependency management and packaging. Install this first. In the pandastools directory (same one where you found this file after cloning the git repo), execute: poetry install License MIT Documentation The official documentation is hosted on Github Pages: https://phil65.github.io/PandasTools/ Contributing to pandas All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome. Or maybe through using PandasTools you have an idea of your own or are looking for something in the documentation and thinking \u2018this can be improved\u2019...you can do something about it!","title":"Home"},{"location":"index.html#pandastools-helper-functions-for-pandas-dataframes-series","text":"","title":"pandastools: Helper functions for Pandas DataFrames / Series"},{"location":"index.html#what-is-it","text":"PandasTools is a Python package that provides additional functions for Pandas DataFrames, Series and Indexes via accessors","title":"What is it?"},{"location":"index.html#main-features","text":"TODO","title":"Main Features"},{"location":"index.html#where-to-get-it","text":"The source code is currently hosted on GitHub at: https://github.com/phil65/PandasTools The latest released version are available at the Python package index . # or PyPI pip install pandastools","title":"Where to get it"},{"location":"index.html#dependencies","text":"pandas numba","title":"Dependencies"},{"location":"index.html#installation-from-sources","text":"This project uses poetry for dependency management and packaging. Install this first. In the pandastools directory (same one where you found this file after cloning the git repo), execute: poetry install","title":"Installation from sources"},{"location":"index.html#license","text":"MIT","title":"License"},{"location":"index.html#documentation","text":"The official documentation is hosted on Github Pages: https://phil65.github.io/PandasTools/","title":"Documentation"},{"location":"index.html#contributing-to-pandas","text":"All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome. Or maybe through using PandasTools you have an idea of your own or are looking for something in the documentation and thinking \u2018this can be improved\u2019...you can do something about it!","title":"Contributing to pandas"},{"location":"changelog.html","text":"v0.3.0 (2020-07-15) Feat DataFrame : add eval method","title":"Changelog"},{"location":"changelog.html#v030-2020-07-15","text":"","title":"v0.3.0 (2020-07-15)"},{"location":"changelog.html#feat","text":"DataFrame : add eval method","title":"Feat"},{"location":"contributing.html","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs ~~~~~~~~~~~ Report bugs at https://github.com/phil65/pandastools/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs ~~~~~~~~ Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features ~~~~~~~~~~~~~~~~~~ Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation ~~~~~~~~~~~~~~~~~~~ PandasTools could always use more documentation, whether as part of the official PandasTools docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback ~~~~~~~~~~~~~~~ The best way to send feedback is to file an issue at https://github.com/phil65/pandastools/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up pandastools for local development. Fork the pandastools repo on GitHub. Clone your fork locally:: $ git clone git@github.com:your_name_here/pandastools.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:: $ mkvirtualenv pandastools $ cd pandastools/ $ python setup.py develop Create a branch for local development:: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests: $ flake8 pandastools tests $ py.test To install required development libraries, run \"pip install -r requirements_dev.txt\". Commit your changes and push your branch to GitHub:: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.6 - 3.8. Check https://travis-ci.org/phil65/pandastools/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Contributing"},{"location":"contributing.html#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing.html#types-of-contributions","text":"Report Bugs ~~~~~~~~~~~ Report bugs at https://github.com/phil65/pandastools/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs ~~~~~~~~ Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features ~~~~~~~~~~~~~~~~~~ Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation ~~~~~~~~~~~~~~~~~~~ PandasTools could always use more documentation, whether as part of the official PandasTools docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback ~~~~~~~~~~~~~~~ The best way to send feedback is to file an issue at https://github.com/phil65/pandastools/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Types of Contributions"},{"location":"contributing.html#get-started","text":"Ready to contribute? Here's how to set up pandastools for local development. Fork the pandastools repo on GitHub. Clone your fork locally:: $ git clone git@github.com:your_name_here/pandastools.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:: $ mkvirtualenv pandastools $ cd pandastools/ $ python setup.py develop Create a branch for local development:: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests: $ flake8 pandastools tests $ py.test To install required development libraries, run \"pip install -r requirements_dev.txt\". Commit your changes and push your branch to GitHub:: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing.html#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.6 - 3.8. Check https://travis-ci.org/phil65/pandastools/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"api/index.html","text":"index module @author: Philipp Temminghoff","title":"index"},{"location":"api/index.html#index-module","text":"","title":"index module"},{"location":"api/index.html#pandastools.accessors.index","text":"@author: Philipp Temminghoff","title":"pandastools.accessors.index"},{"location":"api/dataframe.html","text":"dataframe module @author: Philipp Temminghoff DataFrameAccessor eval ( self , code , variable_name = 'df' ) apply a script to the dataset. Source code in pandastools/accessors/dataframe.py 109 110 111 112 113 114 115 116 117 def eval ( self , code : str , variable_name : str = \"df\" ): \"\"\" apply a script to the dataset. \"\"\" context = { variable_name : self . _obj , \"__builtins__\" : __builtins__ } df = helpers . evaluate ( code = code , context = context , return_val = variable_name ) if not isinstance ( df , pd . DataFrame ): raise TypeError ( \"Function needs to return a dataframe\" ) return df from_script ( code , variable_name = 'df' ) classmethod return a ds resulting from a code block. Result is wrapped as function because we dont want \"ds\" hardcoded Source code in pandastools/accessors/dataframe.py 119 120 121 122 123 124 125 126 127 128 129 @classmethod def from_script ( cls , code : str , variable_name = \"df\" ): \"\"\" return a ds resulting from a code block. Result is wrapped as function because we dont want \"ds\" hardcoded \"\"\" context = { \"__builtins__\" : __builtins__ } df = helpers . evaluate ( code , context , return_val = variable_name ) if not isinstance ( df , pd . DataFrame ): raise TypeError ( \"Function needs to return a dataframe\" ) return df split ( self , thresh , colname , extra_rows = 0 ) split dataframe into separate chunks based on supplied criteria Source code in pandastools/accessors/dataframe.py 54 55 56 57 58 59 60 61 62 63 64 65 def split ( self , thresh , colname , extra_rows : int = 0 ): \"\"\" split dataframe into separate chunks based on supplied criteria \"\"\" # split processes based on bool value (just process when no bool split) df = self . _obj . drop ( \"secs\" , errors = \"ignore\" , axis = 1 ) array = np . full (( len ( df . index ),), np . nan ) df [ \"process_num\" ] = pd . Categorical ( array ) df = dataimport . add_transition_info ( ds = df , colname = colname , threshold = thresh , extra_rows = extra_rows ) return df","title":"dataframe"},{"location":"api/dataframe.html#dataframe-module","text":"","title":"dataframe module"},{"location":"api/dataframe.html#pandastools.accessors.dataframe","text":"@author: Philipp Temminghoff","title":"pandastools.accessors.dataframe"},{"location":"api/dataframe.html#pandastools.accessors.dataframe.DataFrameAccessor","text":"","title":"DataFrameAccessor"},{"location":"api/dataframe.html#pandastools.accessors.dataframe.DataFrameAccessor.eval","text":"apply a script to the dataset. Source code in pandastools/accessors/dataframe.py 109 110 111 112 113 114 115 116 117 def eval ( self , code : str , variable_name : str = \"df\" ): \"\"\" apply a script to the dataset. \"\"\" context = { variable_name : self . _obj , \"__builtins__\" : __builtins__ } df = helpers . evaluate ( code = code , context = context , return_val = variable_name ) if not isinstance ( df , pd . DataFrame ): raise TypeError ( \"Function needs to return a dataframe\" ) return df","title":"eval()"},{"location":"api/dataframe.html#pandastools.accessors.dataframe.DataFrameAccessor.from_script","text":"return a ds resulting from a code block. Result is wrapped as function because we dont want \"ds\" hardcoded Source code in pandastools/accessors/dataframe.py 119 120 121 122 123 124 125 126 127 128 129 @classmethod def from_script ( cls , code : str , variable_name = \"df\" ): \"\"\" return a ds resulting from a code block. Result is wrapped as function because we dont want \"ds\" hardcoded \"\"\" context = { \"__builtins__\" : __builtins__ } df = helpers . evaluate ( code , context , return_val = variable_name ) if not isinstance ( df , pd . DataFrame ): raise TypeError ( \"Function needs to return a dataframe\" ) return df","title":"from_script()"},{"location":"api/dataframe.html#pandastools.accessors.dataframe.DataFrameAccessor.split","text":"split dataframe into separate chunks based on supplied criteria Source code in pandastools/accessors/dataframe.py 54 55 56 57 58 59 60 61 62 63 64 65 def split ( self , thresh , colname , extra_rows : int = 0 ): \"\"\" split dataframe into separate chunks based on supplied criteria \"\"\" # split processes based on bool value (just process when no bool split) df = self . _obj . drop ( \"secs\" , errors = \"ignore\" , axis = 1 ) array = np . full (( len ( df . index ),), np . nan ) df [ \"process_num\" ] = pd . Categorical ( array ) df = dataimport . add_transition_info ( ds = df , colname = colname , threshold = thresh , extra_rows = extra_rows ) return df","title":"split()"},{"location":"api/series.html","text":"series module @author: Philipp Temminghoff","title":"series"},{"location":"api/series.html#series-module","text":"","title":"series module"},{"location":"api/series.html#pandastools.accessors.series","text":"@author: Philipp Temminghoff","title":"pandastools.accessors.series"}]}